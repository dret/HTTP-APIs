<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="videos.xslt"?>
<!DOCTYPE videos SYSTEM "videos.dtd">
<videos>
    <video published="2022-01-24" slug="RFC-8594-The-Sunset-HTTP-Header-Field" webconcepts="rfc8594.xml">
        <title>The Sunset HTTP Header Field</title>
        <resource title='RFC 8594, "The Sunset HTTP Header Field", May 2019' href="https://datatracker.ietf.org/doc/html/rfc8594"/>
        <tagline>Resources and APIs disappear at some point in time; the Sunset field allows to advertise that event to clients.</tagline>
        <link type="youtube" id="twfufQn1mD0"/>
        <why>When a resource or an API is about to be retired, it would be useful for consumers of that resource/API to be notified in advance. By using an HTTP field, this information can be conveyed in-band, instead of having to rely on out-of-band channels such as announcements that are published on Web pages or sent by email.</why>
        <summary>RFC 8594 defines the HTTP field "Sunset" which is used to advertise the timestamp when a resource/API will become unavailable. Providers can use this field to advertise the sunset when it is known. Consumers can use the field to react to such an advertisement, for example by raising alarms or by writing information to a log.</summary>
        <tour>This is a very simple specification. It starts by listing a few use cases, and then introduces and defines the "Sunset" HTTP field. It discusses caching implications as well as how the scope can be defined to apply only to one resource, or to a bigger scope (such as all resourced provided through an API). The specification also defines a link relation type which can be used to link to information about a resource's or API's sunset policy and usage.</tour>
        <history>RFC 8594 was published as a RFC in May 2019. Development of the draft started in August 2015. The specification is stable and currently no revision is planned.</history>
        <example-short>Section 3 of RFC 8594 shows a simple example of how the "Sunset" field can be used. If this header appears in an HTTP response, a consuming application can do whatever has been implemented to deal with an upcoming sunset of a resource or API.</example-short>
        <example-api>In an API, the main question is scope: If an API is scheduled for sunsetting, does the field appear on all resources of the API, or only on select ones which then imply the bigger scope of the API? This policy should be clearly documented for the API so that consumers can adjust accordingly. The "implicit scope" option saves a bit of traffic, but means that generic software not knowing the implicit scope will not be able to understand that all resources of an API will disappear at the sunset time.</example-api>
        <additional>
            <resource title='"API Lifecycle Management: Deprecation and Sunsetting", YouTube, November 2020' href="https://www.youtube.com/watch?v=twfufQn1mD0"/>
        </additional>
    </video>
    <video published="2022-02-04" slug="RFC-7807-Problem-Details-for-HTTP-APIs">
        <title>Problem Details for HTTP APIs</title>
        <resource title='RFC 7807, "Problem Details for HTTP APIs", March 2016' href="https://datatracker.ietf.org/doc/html/rfc7807"/>
        <tagline>Reporting problem information beyond the HTTP status code is useful in many API designs.</tagline>
        <link type="youtube" id="UNdUjBqsUqg"/>
        <why>HTTP has no standard way of communication problem reports or error messages other than the HTTP status code. Many APIs would like to include additional information in their problem reports or error messages so that clients have a better way of understanding what kind of problem or error occurred. By using a specific media type for communicating these conditions, API designers can use an existing format and API consumers can depend on a format that they know.</why>
        <additional>
            <resource title='"Representing Problem Details in HTTP APIs: An Introduction to RFC 7807", YouTube, June 2021' href="https://www.youtube.com/watch?v=UNdUjBqsUqg"/>
        </additional>
    </video>
    <video published="2022-02-05" slug="RFC-8288-Web-Linking">
        <title>Web Linking</title>
        <resource title='RFC 8288, "Web Linking", October 2017' href="https://datatracker.ietf.org/doc/html/rfc8288"/>
        <tagline>Supporting the representation of typed links in HTTP.</tagline>
        <link type="youtube" id="TpVsg2Nz_38"/>
        <why>Many APIs take advantage of links as an important way to relate resources and to guide interactions with the API. For links to be meaningful they must have a type associated with them, so that clients can understand what links represent, and can choose which links to follow. Web linking introduces the idea of a general mechanism for link types, establishes a registry of types so that types can be reused, and it also defines a way how links can be represented in an HTTP field.</why>
        <additional>
            <resource title='"Handling Errors on the Web: SchrÃ¶dinger&apos;s Links and how to handle them", YouTube, May 2021' href="https://www.youtube.com/watch?v=TpVsg2Nz_38"/>
        </additional>
    </video>
    <video published="2022-03-14" slug="rfc-6573-Item-And-Collection-Link-Relations">
        <title>Item and Collection Link Relations</title>
        <resource title='RFC 6573, "Item and Collection Link Relations", April 2012' href="https://datatracker.ietf.org/doc/html/rfc6573" />
        <tagline>Defines a pair of reciprocal link relation types that may be used to express the relationship between a collection and its members.</tagline>
        <link type="youtube" id="TpVsg2Nz_38"/>
        <why>Link relation values can be used to indicate why an application would active a link or form. RFC 6573 defines two possible reasons for activating (or following) links: to reach a `collection` or to view an `item` in a collection. Response representations that include these link relation values are identifying which links return collections and which links return items from a collection.</why>
        <summary>
          This specification relies on RFC5988 which standardized a means of indicating the relationships between resources on the Web. This doc (RFC6573) defines a pair of reciprocal link relation types that may be used to express the relationship between a collection and its members. These link relation types can be applied to a wide range of use cases across multiple media types.
        </summary>
        <tour>
          This is a pretty simple specification. It contains a short introduction (Section 1) followed by the Link Relations section (Sec. 2) which defines the item and collection link relation values. Section 3, the IANA Considerations section, covers the details of the IANA registration of the two values (item and collection). Sections 4 and 5 cover the security and internationalisation considerations, respectively. There is a short References section (Sec 6) along with an Acknowledgements appendix.
        </tour>
        <history>
          RFC6573 is an informational specification that was published in April of 2012. The first draft of the specification was posted in August of 2011. The specification is stable and currently no revision is planned.
        </history>
        <example-short>
          Sections 2.1 (item) and 2.2 (collection) show examples of how the apply the link relation values to HTML anchor tags and HTTP Link headers.  In the case of the link header field, it looks like this:
<![CDATA[
Link: <...>; rel="collection"; title="Return to Product Group X"
Link: <...>; rel="item"; title="View Product X001"
Link: <...>; rel="item"; title="View Product X002"
]]>
        </example-short>
        <example-api>
          A more complete example (taken from the specification document) shows the use of the collection and item link relation values within the document body (in this case HTML):
<![CDATA[
<html>
  ...
    <h1>Product Group X Listing</h1>
    ...
    <a href="..." rel="collection">Return to Product Group X</a>
    
    <a href="..." rel="item">View Product X001</a>
    <a href="..." rel="item">View Product X002</a>
  ...
</html>
]]>
        </example-api>
        <additional>
            <resource title="The Item and Collection Link Relations" href="https://webconcepts.info/specs/IETF/RFC/6573.html" />
            <resource title="Link Relation: Collection" href="https://webconcepts.info/concepts/link-relation/collection" />
            <resource title="Link Relation: Item" href="https://webconcepts.info/concepts/link-relation/item" />
        </additional>  
    </video>      
    <video>
        <title>HTTP History</title>
    </video>
    <video>
        <title>HTTP/1.1 Specification History</title>
    </video>
    <video>
        <title>HTTP Syntax and Semantics</title>
    </video>
    <video>
        <title>HTTP Conditional Requests</title>
    </video>
    <video>
        <title>HTTP Range Requests</title>
    </video>
    <video>
        <title>HTTP Caching</title>
    </video>
    <video>
        <title>HTTP Authentication</title>
    </video>
    <video>
        <title>HTTP Structured Headers</title>
    </video>
    <video>
        <title>HTTP SEARCH</title>
    </video>
    <video>
        <title>HTTP/2</title>
    </video>
    <video>
        <title>HTTP/3</title>
    </video>
    <video>
        <title>Problem Details</title>
    </video>
    <video>
        <title>Web Linking</title>
    </video>
    <video>
        <title>Linksets</title>
    </video>
</videos>
